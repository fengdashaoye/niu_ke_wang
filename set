题目描述
给你两个集合，要求{A} + {B}。 注：同一个集合中不会有两个相同的元素。
输入描述:
每组输入数据分为三行,第一行有两个数字n,m(0 ≤ n,m ≤ 10000)，分别表示集合A和集合B的元素个数。后两行分别表示集合A和集合B。
每个元素为不超过int范围的整数,每个元素之间有个空格隔开。
输出描述:
针对每组数据输出一行数据，表示合并后的集合，要求从小到大输出，每个元素之间有一个空格隔开,行末无空格。
示例1
输入

3 3
1 3 5
2 4 6
输出

1 2 3 4 5 6

思路：集合去重而已，用hashmap即可，或者使用treeset，不要用hashset
代码：
import java.util.*;

public class Main{
    public static void main(String[] args){
        Scanner in = new Scanner(System.in);
        while(in.hasNext()){
            int A = in.nextInt();
            int B = in.nextInt();
            int[] set_A = new int[A];
            int[] set_B = new int[B];
            HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
            for(int i = 0; i < A; i++){
                int number = in.nextInt();
                map.put(number, 1);
            }
            for(int i = 0; i < B; i++){
                int number = in.nextInt();
                map.put(number, 1);
            }
          	
            int[] result = new int[map.size()];
            int i = 0;
            for(Map.Entry<Integer, Integer> entry : map.entrySet()){
                result[i] = entry.getKey();
                i++;//忘记i++了
            }
            Arrays.sort(result);
            
            for(i = 0; i < result.length - 1; i++){
                System.out.print(result[i] + " ");
            }
            System.out.println(result[result.length - 1]);
        }
    }
}


代码：
import java.util.Iterator;
import java.util.Scanner;
import java.util.Set;
import java.util.TreeSet;

public class Main {
     public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int alen = sc.nextInt();
        int blen = sc.nextInt();
        Set<Integer> set= new TreeSet<Integer>();
        for(int i=0;i<alen;i++){
            set.add(sc.nextInt());
        }
        for(int j=0;j<blen;j++){
            set.add(sc.nextInt());
        }
        Iterator<Integer> iterator = set.iterator();
        while(iterator.hasNext()){
            System.out.print(iterator.next());
            if(iterator.hasNext()){
                System.out.print(" ");
            }
        }
    }
}
