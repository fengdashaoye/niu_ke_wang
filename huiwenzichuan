题目描述
如果一个数字序列逆置之后跟原序列是一样的就称这样的数字序列为回文序列。例如：
{1, 2, 1}, {15, 78, 78, 15} , {112} 是回文序列, 
{1, 2, 2}, {15, 78, 87, 51} ,{112, 2, 11} 不是回文序列。
现在给出一个数字序列，允许使用一种转换操作：
选择任意两个相邻的数，然后从序列移除这两个数，并用这两个数字的和插入到这两个数之前的位置(只插入一个和)。
现在对于所给序列要求出最少需要多少次操作可以将其变成回文序列。
输入描述:
输入为两行，第一行为序列长度n ( 1 ≤ n ≤ 50) 第二行为序列中的n个整数item[i] (1 ≤ iteam[i] ≤ 1000)，以空格分隔。
输出描述:
输出一个数，表示最少需要的转换次数
示例1
输入

4 1 1 1 3
输出

2(输出应该是1，因为只要最后1和3相加即可)

思路：老实说，这道题一点思路都没有，后来看了讲解才明白，首先最后肯定能成为回文字串的。因为加到最后会变成一个数字。
这时候，判断回文，肯定是要从首尾开始。
所以这道思路是起首尾两个坐标，看他们值是否相等，相等的话坐标就向中间靠拢，不相等的话小的值加入其相邻的值，如left就加入left+1坐标的
值，然后将该值更新坐标left+1坐标的值，相应，如果right就加入right - 1坐标的值，其值更新right - 1坐标的值。注意计数，count要++

代码：
import java.util.*;

public class Main{
    public static void main(String[] args){
        Scanner in = new Scanner(System.in);
        int number = in.nextInt();
        int[] content = new int[number];
        for(int i = 0; i < number; i++){
            content[i] = in.nextInt();
        }
        int start = 0;
        int end = content.length - 1;
        int count = 0;
        while(start <= end){
            if(content[start] < content[end]){
                content[start + 1] += content[start];
                start++;
                count++;
            }else if(content[start] > content[end]){
                content[end - 1] += content[end];
                end--;
                count++;
            }else{
                start++;
                end--;
            }
        }
        System.out.println(count);
        
        
        
    }
}
