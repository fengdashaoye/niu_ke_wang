题目描述
Fibonacci数列是这样定义的：
F[0] = 0
F[1] = 1
for each i ≥ 2: F[i] = F[i-1] + F[i-2]
因此，Fibonacci数列就形如：0, 1, 1, 2, 3, 5, 8, 13, ...，在Fibonacci数列中的数我们称为Fibonacci数。
给你一个N，你想让其变为一个Fibonacci数，每一步你可以把当前数字X变为X-1或者X+1，现在给你一个数N求最少需要多少步可以变为Fibonacci数。
输入描述:
输入为一个正整数N(1 ≤ N ≤ 1,000,000)
输出描述:
输出一个最小的步数变为Fibonacci数"
示例1
输入

15
输出

2

思路：这道题非常简单，就是简单的斐波那契数列，设a = 0, b = 1, c = a + b，然后不断更新b和a即可。
计算斐波那契数列直至输入的number附近，输出大于number和小于number的斐波那契数列的对应的数字，然后看这两个数字到输入数字number的距离即可。。。
代码：
import java.util.*;

public class Main{
    public static void main(String[] args){
        Main test = new Main();
        Scanner in = new Scanner(System.in);
        int number = in.nextInt();
        int[] result = test.getFibonacci(number);
        int first = number - result[0];
        int second = result[1] - number;
        first = first < second ? first : second;
        System.out.println(first);
    }
    public int[] getFibonacci(int number){
        int a = 0;
        int b = 1;
        int c = a + b;
        int pre = 0;
        while(c < number){
            pre = c;
            c = a + b;
            a = b;
            b = c;
        }
        int[] result = new int[2];
        result[0] = pre;
        result[1] = c;
        return result;
    }
}
