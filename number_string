题目描述
设有n个正整数，将他们连接成一排，组成一个最大的多位整数。
如:n=3时，3个整数13,312,343,连成的最大整数为34331213。
如:n=4时,4个整数7,13,4,246连接成的最大整数为7424613。
输入描述:
有多组测试样例，每组测试样例包含两行，第一行为一个整数N（N<=100），第二行包含N个数(每个数不超过1000，空格分开)。
输出描述:
每组数据输出一个表示最大的整数。
示例1
输入

2
12 123
4
7 13 4 246
输出

12312
7424613

思路：这道题还是有点复杂的。首先注意，在判断整数最高位时，可以把该整数变成字符串，然后判断第0位数符即可。
然后，依次遍历找出最高位最大的数字，如果最高位相同，则将此时遍历到的数字和之前最大的数字依次往后遍历，看沿途那个数字
最大，如果中途新遍历到的那个数字的一位大，则更新。否则不更新，如果二者长度不同，且之前最短的相同，如93,9367，则对936进行
判断，此时，需要9367中的6这个数字，与开头的数字9相比，而非6的前一位3相比，如果大于，则将新遍历的数字进行更新，否则不更新。
因为939367比936793要大，所以是跟首位比较。。。

代码：
import java.util.*;

public class Main{
    public static void main(String[] args){
        Scanner in = new Scanner(System.in);
        while(in.hasNext()){
            int number = in.nextInt();
            int[] content = new int[number];
            for(int i = 0; i < number; i++){
                content[i] = in.nextInt();
            }
            ArrayList<Integer> list = new ArrayList<Integer>();
            int pre = number;
            while(pre >= 0){
                int max = 0;
                int position = 0;
                String first_char = "";
                String pre_max = "";
                for(int i = 0; i < number; i++){
                    if(content[i] != -1){
                        first_char = content[i] + "";
                        int first = first_char.charAt(0) - '0';//取得最大位最大的数字
                        if(first > max){//取得最大位最大的数字
                            max = first;
                            position = i;
                            pre_max = first_char;//之前最大的
                        }else if(first == max){//如345和346这样的数字
                            int t = 1;
                            for(t = 1; t < first_char.length() && t < pre_max.length(); t++){
                                if(first_char.charAt(t) - '0' > pre_max.charAt(t) - '0'){
                                    max = first_char.charAt(0) - '0';
                                    position = i;
                                    pre_max = first_char;
                                    break;
                                }else if(first_char.charAt(t) - '0' < pre_max.charAt(t) - '0'){
                                    break;
                                }
                            }
                            if(t == first_char.length() && t < pre_max.length()){//12和123,123应放在前面
                                if(t > 0 && (pre_max.charAt(t) - '0' <= pre_max.charAt(0) - '0')){//避免93,93,936
                                    max = first_char.charAt(0) - '0';
                                    position = i;
                                    pre_max = first_char;
                                }
                            }else if(t == pre_max.length() && t < first_char.length()){//避免93,93,936
                                if(t > 0 && (first_char.charAt(t) - '0' >= first_char.charAt(0) - '0')){
                                    max = first_char.charAt(0) - '0';
                                    position = i;
                                    pre_max = first_char;
                                }
                            }
                            
                        }
                    }
                }
                list.add(content[position]);
                content[position] = -1;
                pre--;
            }
            list.remove(list.size() - 1);
            String result = "";
            for(int i = 0; i < list.size(); i++){
                result += list.get(i);
            }
            System.out.println(result);
        }
        
    }
}
