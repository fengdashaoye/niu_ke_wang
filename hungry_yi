题目描述
小易总是感觉饥饿，所以作为章鱼的小易经常出去寻找贝壳吃。最开始小易在一个初始位置x_0。对于小易所处的当前位置x，他只
能通过神秘的力量移动到 4 * x + 3或者8 * x + 7。因为使用神秘力量要耗费太多体力，所以它只能使用神秘力量最多100,000次。贝
壳总生长在能被1,000,000,007整除的位置(比如：位置0，位置1,000,000,007，位置2,000,000,014等)。小易需要你帮忙计算最少需要使用
多少次神秘力量就能吃到贝壳。
输入描述:
输入一个初始位置x_0,范围在1到1,000,000,006
输出描述:
输出小易最少需要使用神秘力量的次数，如果使用次数使用完还没找到贝壳，则输出-1
示例1
输入

125000000
输出

1

深度优先遍历：一个for循环，循环里面是DFS,DFS的参数是未曾遍历过的点，设为a。DFS函数里面也有一个循环i，循环所有节点看谁与节点a相连。
如果相连，置其状态为已访问，然后把相连的节点为起点，再次DFS。这就是找一个途中有多少个连通子树。

广度优先遍历：可以找到最短路径。以一个点为起点，加入queue中，while(!queue.isEmpty())，从queue中取出点i，将与点i相连的点都放进queue中
此途中更新起点到该点的距离，即加1。

思路：一开始的思路是仿照之前那道网易的题目，利用BFS，一次次寻找，直至能够找到一个数字能被1,000,000,007整除，但是只通过了10%，剩下的
超时了，这里看到它的移动为4 * x + 3和8 * x + 7这应该是有规律的
代码：
import java.util.*;

public class Main{
    public static void main(String[] args){
        Scanner in = new Scanner(System.in);
        while(in.hasNext()){
            long start = in.nextLong();
            int count = 1;
            System.out.println(BFS(start, new ArrayList<Long>()));
            
        }
    }
    public static long BFS(long start, ArrayList<Long> visit){
        Queue<long[]> queue = new LinkedList<>();
        
        long[] node = new long[]{start, 0};
        long[] left, right;
        queue.add(node);
        visit.add(node[0]);
        long count = node[1];
        while(!queue.isEmpty()){
            long[] now = queue.poll();
            if(now[1] > 100000){
                break;
            }
            if(now[0] % 1000000007 == 0){
                return now[1];
            }
            left = new long[]{4 * now[0] + 3,now[1] + 1};
            right = new long[]{8 * now[0] + 7, now[1] + 1};
            if(!visit.contains(left[0])){
                queue.add(left);
                visit.add(left[0]);
            }
            if(!visit.contains(right[0])){
                queue.add(right);
                visit.add(right[0]);
            }
            
        }
        return -1;
        
    }    
}


因为(a*x+b)%c=(a*(x%c)+b)%c,所以每次只放入余数即可（没有理解？？？），遇到余数为0则停止循环

import java.util.*;

public class Main{
    final static long MOD = 1000000007L;
    final static int MAX = 100000;
    public static void main(String[] args){
        Scanner in = new Scanner(System.in);
        while(in.hasNext()){
            long start = in.nextLong();
            int count = 1;
            System.out.println(BFS(start));
            
        }
    }
    public static long BFS(long x){
        Map<Long, Integer> dist = new HashMap<Long, Integer>();//用哈希表存储已访问的点
        Queue<Long> queue = new LinkedList<Long>();//使用队列存储待访问的点，bfs广度优先遍历
        dist.put(x, 0);
        queue.add(x);
        while (!queue.isEmpty()) {
            long d;
            Long top = queue.poll();
            if (dist.get(top) > MAX)
                break;
            if (top == 0) {
                return dist.get(top);
            }
            d = ((top << 2) + 3) % MOD;
            if (d == 0) {
                return dist.get(top) + 1;
            }
            if (!dist.containsKey(d)) {
                queue.add(d);
                dist.put(d, dist.get(top) + 1);
            }
            d = ((top << 3) + 7) % MOD;
            if (d == 0) {
                return dist.get(top) + 1;
            }
            if (!dist.containsKey(d)) {
                queue.add(d);
                dist.put(d, dist.get(top) + 1);
            }
        }
        return -1L;
        
    }
    
    
}
