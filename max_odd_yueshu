题目描述
小易是一个数论爱好者，并且对于一个数的奇数约数十分感兴趣。一天小易遇到这样一个问题： 定义函数f(x)为x最大的奇数约数，x为正整数。 
例如:f(44) = 11.
现在给出一个N，需要求出 f(1) + f(2) + f(3).......f(N)
例如： N = 7 
f(1) + f(2) + f(3) + f(4) + f(5) + f(6) + f(7) = 1 + 1 + 3 + 1 + 5 + 3 + 7 = 21
小易计算这个问题遇到了困难，需要你来设计一个算法帮助他。
输入描述:
输入一个整数N (1 ≤ N ≤ 1000000000)
输出描述:
输出一个整数，即为f(1) + f(2) + f(3).......f(N)
示例1
输入

7
输出

21

思路：这道题主要是范围很大，对于技术，最大奇数约数就是自身，对于偶数，需要不断除2，直至为奇数,这里可以用到动态规划。
但是数字很大。

代码：
import java.util.*;

public class Main{
    public static void main(String[] args){
        Main test = new Main();
        Scanner in = new Scanner(System.in);
        int number = in.nextInt();
        int sum = 0;
        if(number % 2 == 0){//奇数和
            sum = (1 + number - 1) * (number / 4);
        }else{
            sum = (1 + number) * ((number + 1) / 4);
        }
        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        
        for(int i = 2; i <= number; i = i + 2){
            int half = i / 2;
            if(map.containsKey(half)){
            	map.put(i, map.get(half));
                sum += map.get(half);
            }else{
                while(half > 1 && half % 2 == 0){
                    half = half / 2;
                }
                sum += half;
                map.put(i, half);
            }
        }
        System.out.println(sum);
        
    }
}

找到一种非常巧妙的方法

思路：对于1,2,3,4,5,6,7,8,9,10
首先找出奇数和，即1 + 3 + 5 + 7 + 9，
对于代码中的这两行
long odd_number = (1 + i) / 2;
long odd_sum = ((1 + i) / 2) * odd_number;
剩下的2,4,6,8,10的对应的序列为1,2,3,4,5
此时将i = i / 2，变成5.此时再计算其中的技术和,即1 + 3 + 5.
剩下的2, 4对应的序列为1, 2，此时将i = i / 2，变成2，计算其中的奇数1，加入sum中。
此时剩下的2对应的序列为1.

这道题的巧妙在于每一轮利用公式计算奇数和，其中的偶数的最大奇数序列变成1,2,....i/2，再利用公式计算奇数和，剩余的
偶数的最大奇数序列变成1,2,....i/2，不断迭代。
奇偶变化实在是巧妙。。。

代码：
import java.util.*;

public class Main{
    public static void main(String[] args){
        Main test = new Main();
        Scanner in = new Scanner(System.in);
        long number = in.nextInt();
        long sum = 0;
        for(long i = number; i > 0; i = i / 2){
            long odd_number = (1 + i) / 2;
            long odd_sum = ((1 + i) / 2) * odd_number;
            sum += odd_sum;
        }
        System.out.println(sum);
        
    }
}
